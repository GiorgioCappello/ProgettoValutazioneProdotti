# -*- coding: utf-8 -*-
"""pulito_II

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WpeepRViRsTosUbS_eaBUxH64OMeSJZo
"""

import numpy as np
from scipy.stats import norm


#formulina per: d1 e d2
def calcolo_d1_d2(X_0, K, r, sigma, T):
    d1 = (np.log(X_0 / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    return d1, d2

#formulina usata per il PD -> che poi serve per il CVA
def calcolo_PD(d2):
    PD = norm.cdf(-d2)
    return PD
##fomulina usata per calcolare il CVA

def calcolo_CVA(LGD, PD, EAD, r, T):
    CVA = LGD * PD * EAD * (1 - np.exp(-r * T))
    return CVA

#parametri del problema
LGD = 0.60
X_0 = 100
K = 95
r = 0.03
sigma = 20 # **(-1/2)  ?????
T = 2
n_simulazioni = 100000

#calcolo di: d1 e d2
d1, d2 = calcolo_d1_d2(X_0, K, r, sigma, T)

#calcoliamo la Probabilit√† di Default (PD)
PD = calcolo_PD(d2)

#calcolo dell'esposizione al default (EAD)
EAD = (K - X_0)

#calcoliamo il CVA al tempo 0
CVA = calcolo_CVA(-LGD, PD, EAD, r, T)

print("il CVA al tempo 0: ", CVA)


#DA RIVEDERE!!
#simulazione dei tempi di fallimento
default_times = np.random.uniform(0, T, n_simulazioni)    #RAMDOMICO !

#calcolo del CVA per ciascuna realizzazione
CVA_simulazioni = []
for i in range(n_simulazioni):
    default_time = default_times[i]
    default_indicator = default_time <= T
    EAD_i = EAD * default_indicator
    PD_i = norm.cdf((np.log(X_0 / K) + (r - 0.5 * sigma**2) * T) / (sigma * np.sqrt(T)))
    CVA_i = calcolo_CVA(-LGD, PD_i, EAD_i, r, T)
    CVA_simulazioni.append(CVA_i)

#calcolo dell'intervallo di confidenza al 98% per il CVA
lower_bound = np.percentile(CVA_simulazioni, 1)
upper_bound = np.percentile(CVA_simulazioni, 99)

print("L'intervallo di confidenza al 98% per il CVA:", (lower_bound, upper_bound))



